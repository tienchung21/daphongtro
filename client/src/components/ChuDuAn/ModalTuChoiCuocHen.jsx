import React, { useState } from 'react';
import './ModalTuChoiCuocHen.css';
import { HiOutlineXMark, HiOutlineClock, HiOutlineUser, HiOutlineHome } from 'react-icons/hi2';
import { CuocHenService } from '../../services/ChuDuAnService';

/**
 * Modal T·ª´ ch·ªëi Cu·ªôc h·∫πn
 * UC-PROJ-02: T·ª´ ch·ªëi cu·ªôc h·∫πn v·ªõi l√Ω do r√µ r√†ng
 */
function ModalTuChoiCuocHen({ cuocHen, onClose, onSuccess }) {
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    lyDoTuChoi: '',
    lyDoKhac: '',
    ghiChu: ''
  });

  const lyDoOptions = [
    { value: 'phong_da_cho_thue', label: 'Ph√≤ng ƒë√£ cho thu√™' },
    { value: 'khung_gio_khong_phu_hop', label: 'Khung gi·ªù kh√¥ng ph√π h·ª£p' },
    { value: 'khach_khong_du_dieu_kien', label: 'Kh√°ch h√†ng kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán' },
    { value: 'du_an_tam_ngung', label: 'D·ª± √°n t·∫°m ng·ª´ng ho·∫°t ƒë·ªông' },
    { value: 'khac', label: 'L√Ω do kh√°c' }
  ];

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const lyDoFinal = formData.lyDoTuChoi === 'khac' 
      ? formData.lyDoKhac 
      : lyDoOptions.find(o => o.value === formData.lyDoTuChoi)?.label;

    if (!lyDoFinal || !lyDoFinal.trim()) {
      alert('Vui l√≤ng ch·ªçn/nh·∫≠p l√Ω do t·ª´ ch·ªëi');
      return;
    }

    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën t·ª´ ch·ªëi cu·ªôc h·∫πn n√†y?')) {
      return;
    }

    try {
      setLoading(true);
      
      await CuocHenService.tuChoi(cuocHen.CuocHenID, lyDoFinal);

      alert('‚úÖ ƒê√£ t·ª´ ch·ªëi cu·ªôc h·∫πn.\nH·ªá th·ªëng ƒë√£ g·ª≠i th√¥ng b√°o l·ªãch s·ª± cho kh√°ch h√†ng k√®m g·ª£i √Ω ph√≤ng kh√°c.');
      onSuccess();
    } catch (error) {
      console.error('L·ªói t·ª´ ch·ªëi:', error);
      alert('‚ùå C√≥ l·ªói x·∫£y ra: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', { 
      weekday: 'long',
      day: '2-digit', 
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content tu-choi-modal" onClick={(e) => e.stopPropagation()}>
        {/* Header */}
        <div className="modal-header danger">
          <div className="modal-header-content">
            <div className="modal-icon danger">
              <HiOutlineXMark />
            </div>
            <div>
              <h2 className="modal-title">T·ª´ ch·ªëi Cu·ªôc h·∫πn</h2>
              <p className="modal-subtitle">Cu·ªôc h·∫πn #{cuocHen?.CuocHenID}</p>
            </div>
          </div>
          <button className="modal-close" onClick={onClose}>
            <HiOutlineXMark />
          </button>
        </div>

        {/* Body */}
        <div className="modal-body">
          {/* Th√¥ng tin cu·ªôc h·∫πn */}
          <div className="info-section">
            <h3 className="section-title">üìÖ Th√¥ng tin cu·ªôc h·∫πn</h3>
            <div className="info-grid">
              <div className="info-item">
                <HiOutlineClock className="info-icon" />
                <div>
                  <div className="info-label">Th·ªùi gian</div>
                  <div className="info-value">{formatDate(cuocHen?.ThoiGianHen)}</div>
                </div>
              </div>
              
              <div className="info-item">
                <HiOutlineUser className="info-icon" />
                <div>
                  <div className="info-label">Kh√°ch h√†ng</div>
                  <div className="info-value">{cuocHen?.TenKhachHang || 'N/A'}</div>
                  <div className="info-sub">{cuocHen?.SoDienThoaiKhach || 'N/A'}</div>
                </div>
              </div>
              
              <div className="info-item">
                <HiOutlineHome className="info-icon" />
                <div>
                  <div className="info-label">Ph√≤ng</div>
                  <div className="info-value">{cuocHen?.TenPhong || 'N/A'}</div>
                  <div className="info-sub">{cuocHen?.TenDuAn || 'N/A'}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Warning */}
          <div className="warning-box">
            <div className="warning-icon">‚ö†Ô∏è</div>
            <div className="warning-content">
              <strong>L∆∞u √Ω quan tr·ªçng:</strong>
              <p>Vi·ªác t·ª´ ch·ªëi cu·ªôc h·∫πn c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn tr·∫£i nghi·ªám kh√°ch h√†ng v√† ƒë√°nh gi√° c·ªßa b·∫°n. 
              H√£y ƒë·∫£m b·∫£o l√Ω do t·ª´ ch·ªëi r√µ r√†ng v√† h·ª£p l√Ω.</p>
            </div>
          </div>

          {/* Form nh·∫≠p l√Ω do */}
          <form onSubmit={handleSubmit}>
            <div className="form-section">
              <div className="cda-form-group">
                <label className="cda-label cda-label-required">
                  L√Ω do t·ª´ ch·ªëi
                </label>
                <select
                  className="cda-select"
                  value={formData.lyDoTuChoi}
                  onChange={(e) => setFormData({ ...formData, lyDoTuChoi: e.target.value })}
                  required
                >
                  <option value="">-- Ch·ªçn l√Ω do --</option>
                  {lyDoOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              {formData.lyDoTuChoi === 'khac' && (
                <div className="cda-form-group">
                  <label className="cda-label cda-label-required">
                    M√¥ t·∫£ chi ti·∫øt l√Ω do
                  </label>
                  <textarea
                    className="cda-textarea"
                    rows="4"
                    placeholder="Vui l√≤ng m√¥ t·∫£ chi ti·∫øt l√Ω do t·ª´ ch·ªëi..."
                    value={formData.lyDoKhac}
                    onChange={(e) => setFormData({ ...formData, lyDoKhac: e.target.value })}
                    required
                  />
                </div>
              )}

              <div className="cda-form-group">
                <label className="cda-label">
                  Ghi ch√∫ n·ªôi b·ªô (t√πy ch·ªçn)
                </label>
                <textarea
                  className="cda-textarea"
                  rows="3"
                  placeholder="Ghi ch√∫ n·ªôi b·ªô, kh√¥ng g·ª≠i cho kh√°ch h√†ng..."
                  value={formData.ghiChu}
                  onChange={(e) => setFormData({ ...formData, ghiChu: e.target.value })}
                />
              </div>
            </div>

            {/* Actions sau khi t·ª´ ch·ªëi */}
            <div className="auto-actions-info info">
              <h4 className="auto-actions-title">‚ÑπÔ∏è H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông:</h4>
              <ul className="auto-actions-list">
                <li>‚Ä¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªôc h·∫πn th√†nh "ƒê√£ t·ª´ ch·ªëi"</li>
                <li>‚Ä¢ G·ª≠i th√¥ng b√°o l·ªãch s·ª± cho kh√°ch h√†ng k√®m l√Ω do</li>
                <li>‚Ä¢ ƒê·ªÅ xu·∫•t c√°c tin ƒëƒÉng kh√°c ph√π h·ª£p cho kh√°ch</li>
                <li>‚Ä¢ Th√¥ng b√°o cho nh√¢n vi√™n b√°n h√†ng</li>
                <li>‚Ä¢ Gi·∫£i ph√≥ng slot th·ªùi gian cho cu·ªôc h·∫πn kh√°c</li>
              </ul>
            </div>

            {/* Footer Actions */}
            <div className="modal-footer">
              <button 
                type="button"
                className="cda-btn cda-btn-secondary" 
                onClick={onClose}
                disabled={loading}
              >
                Quay l·∫°i
              </button>
              <button 
                type="submit"
                className="cda-btn cda-btn-danger" 
                disabled={loading}
              >
                {loading ? (
                  <>
                    <div className="cda-spinner small"></div>
                    ƒêang x·ª≠ l√Ω...
                  </>
                ) : (
                  <>
                    <HiOutlineXMark />
                    X√°c nh·∫≠n t·ª´ ch·ªëi
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default ModalTuChoiCuocHen;
