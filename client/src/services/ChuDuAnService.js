/**
 * Service API cho Ch·ªß d·ª± √°n
 * X·ª≠ l√Ω t·∫•t c·∫£ c√°c API calls li√™n quan ƒë·∫øn nghi·ªáp v·ª• ch·ªß d·ª± √°n
 */

// Base URL t·ª´ environment ho·∫∑c config
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000';
const API_PREFIX = '/api/chu-du-an';

/**
 * Utility function ƒë·ªÉ t·∫°o headers v·ªõi token
 */
const getAuthHeaders = () => {
  // Mock token cho development
  const token = localStorage.getItem('token') || 'mock-token-for-development';
  return {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  };
};

/**
 * Utility function ƒë·ªÉ x·ª≠ l√Ω response
 */
const handleResponse = async (response) => {
  try {
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    return data;
  } catch (error) {
    // N·∫øu response kh√¥ng ph·∫£i JSON (v√≠ d·ª•: HTML error page)
    if (error.name === 'SyntaxError') {
      throw new Error(`Server tr·∫£ v·ªÅ response kh√¥ng ph·∫£i JSON. Status: ${response.status}`);
    }
    throw error;
  }
};

/**
 * Service cho Dashboard
 */
export const DashboardService = {
  /**
   * L·∫•y d·ªØ li·ªáu dashboard t·ªïng quan
   */
  async layDashboard() {
    try {
      const url = `${API_BASE_URL}${API_PREFIX}/dashboard`;
      console.log('üîó API URL:', url);
      
      const response = await fetch(url, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y dashboard:', error);
      throw error;
    }
  }
};

/**
 * Service cho Tin ƒëƒÉng (UC-PROJ-01)
 */
export const TinDangService = {
  /**
   * L·∫•y danh s√°ch tin ƒëƒÉng
   */
  async layDanhSach(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * L·∫•y chi ti·∫øt tin ƒëƒÉng
   */
  async layChiTiet(tinDangId) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * T·∫°o tin ƒëƒÉng m·ªõi
   */
  async taoMoi(tinDangData) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/tin-dang`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(tinDangData)
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi t·∫°o tin ƒëƒÉng:', error);
      throw error;
    }
  },

  async tao(tinDangData) {
    return this.taoMoi(tinDangData);
  },

  /**
   * C·∫≠p nh·∫≠t tin ƒëƒÉng
   */
  async capNhat(tinDangId, updateData) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}`, 
        {
          method: 'PUT',
          headers: getAuthHeaders(),
          body: JSON.stringify(updateData)
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * G·ª≠i tin ƒëƒÉng ƒë·ªÉ duy·ªát
   */
  async guiDuyet(tinDangId) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}/gui-duyet`, 
        {
          method: 'POST',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi g·ª≠i tin ƒëƒÉng ƒë·ªÉ duy·ªát:', error);
      throw error;
    }
  },

  /**
   * L∆∞u tin ƒëƒÉng nh·∫≠p
   */
  async luuNhap(data) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/tin-dang/nhap`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(data)
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l∆∞u tin ƒëƒÉng nh·∫≠p:', error);
      throw error;
    }
  },

  /**
   * L·∫•y danh s√°ch ph√≤ng c·ªßa tin ƒëƒÉng
   */
  async layDanhSachPhong(tinDangId) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}/phong`,
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng:', error);
      throw error;
    }
  },

  /**
   * L·∫•y tin ƒëƒÉng ƒë·ªÉ ch·ªânh s·ª≠a
   */
  async layTinDangDeChinhSua(tinDangId) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}/chinh-sua`,
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y tin ƒëƒÉng ƒë·ªÉ ch·ªânh s·ª≠a:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t tin ƒëƒÉng (PUT)
   */
  async capNhatTinDang(tinDangId, data) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}`,
        {
          method: 'PUT',
          headers: getAuthHeaders(),
          body: JSON.stringify(data)
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * X√≥a tin ƒëƒÉng (DELETE)
   * @param {number} tinDangId - ID tin ƒëƒÉng
   * @param {string} lyDoXoa - L√Ω do x√≥a (b·∫Øt bu·ªôc n·∫øu tin ƒë√£ duy·ªát/ƒëang ƒëƒÉng)
   */
  async xoaTinDang(tinDangId, lyDoXoa = null) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-dang/${tinDangId}`,
        {
          method: 'DELETE',
          headers: getAuthHeaders(),
          body: JSON.stringify({ lyDoXoa })
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi x√≥a tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * L·∫•y danh s√°ch tin nh√°p
   */
  async layDanhSachTinNhap() {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/tin-nhap`,
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch tin nh√°p:', error);
      throw error;
    }
  }
};

/**
 * Service cho Cu·ªôc h·∫πn (UC-PROJ-02)
 */
export const CuocHenService = {
  /**
   * L·∫•y danh s√°ch cu·ªôc h·∫πn
   */
  async layDanhSach(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/cuoc-hen?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch cu·ªôc h·∫πn:', error);
      throw error;
    }
  },

  /**
   * X√°c nh·∫≠n cu·ªôc h·∫πn
   */
  async xacNhan(cuocHenId, ghiChu = '') {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/cuoc-hen/${cuocHenId}/xac-nhan`, 
        {
          method: 'POST',
          headers: getAuthHeaders(),
          body: JSON.stringify({ ghiChu })
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi x√°c nh·∫≠n cu·ªôc h·∫πn:', error);
      throw error;
    }
  }
};

/**
 * Service cho B√°o c√°o (UC-PROJ-03)
 */
export const BaoCaoService = {
  /**
   * L·∫•y b√°o c√°o hi·ªáu su·∫•t t·ªïng quan (Dashboard)
   */
  async layBaoCaoHieuSuat(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/bao-cao-hieu-suat?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y b√°o c√°o hi·ªáu su·∫•t:', error);
      throw error;
    }
  },

  /**
   * L·∫•y b√°o c√°o chi ti·∫øt (B√°o c√°o page) - üÜï
   */
  async layBaoCaoChiTiet(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/bao-cao-chi-tiet?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y b√°o c√°o chi ti·∫øt:', error);
      throw error;
    }
  },

  /**
   * L·∫•y doanh thu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t) - üÜï
   */
  async layDoanhThuTheoThang() {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/bao-cao/doanh-thu-theo-thang`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y doanh thu theo th√°ng:', error);
      throw error;
    }
  },

  /**
   * L·∫•y Top 5 tin ƒëƒÉng hi·ªáu qu·∫£ nh·∫•t - üÜï
   */
  async layTopTinDang(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/bao-cao/top-tin-dang?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y top tin ƒëƒÉng:', error);
      throw error;
    }
  },

  /**
   * L·∫•y Conversion Rate - üÜï
   */
  async layConversionRate(filters = {}) {
    try {
      const queryParams = new URLSearchParams();
      Object.entries(filters).forEach(([key, value]) => {
        if (value) queryParams.append(key, value);
      });

      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/bao-cao/conversion-rate?${queryParams}`, 
        {
          method: 'GET',
          headers: getAuthHeaders()
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y conversion rate:', error);
      throw error;
    }
  }
};

/**
 * Service cho D·ª± √°n
 */
export const DuAnService = {
  /**
   * L·∫•y danh s√°ch d·ª± √°n
   */
  async layDanhSach() {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch d·ª± √°n:', error);
      throw error;
    }
  },

  /**
   * L·∫•y chi ti·∫øt d·ª± √°n theo ID
   */
  async layChiTiet(duAnId) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an/${duAnId}`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt d·ª± √°n:', error);
      throw error;
    }
  }
  ,
  async taoNhanh(payload) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an/tao-nhanh`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói t·∫°o d·ª± √°n:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t d·ª± √°n
   */
  async capNhat(duAnId, payload) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an/${duAnId}`, {
        method: 'PUT',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t d·ª± √°n:', error);
      throw error;
    }
  },

  /**
   * L∆∞u tr·ªØ d·ª± √°n (soft delete)
   */
  async luuTru(duAnId, payload = {}) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an/${duAnId}`, {
        method: 'DELETE',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói l∆∞u tr·ªØ d·ª± √°n:', error);
      throw error;
    }
  },

  /**
   * L·∫•y chi ti·∫øt ch√≠nh s√°ch c·ªçc
   */
  async layChiTietChinhSachCoc(chinhSachId) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/chinh-sach-coc/${chinhSachId}`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt ch√≠nh s√°ch c·ªçc:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t ch√≠nh s√°ch c·ªçc
   */
  async capNhatChinhSachCoc(chinhSachId, payload) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/chinh-sach-coc/${chinhSachId}`, {
        method: 'PUT',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t ch√≠nh s√°ch c·ªçc:', error);
      throw error;
    }
  }
};

/**
 * Service cho Ph√≤ng (d·ª± √°n)
 */
export const PhongService = {
  async layTheoDuAn(duAnId) {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/du-an/${duAnId}/phong`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng d·ª± √°n:', error);
      throw error;
    }
  }
};

/**
 * Service cho H·ª£p ƒë·ªìng (UC-PROJ-04)
 */
export const HopDongService = {
  /**
   * B√°o c√°o h·ª£p ƒë·ªìng cho thu√™
   */
  async baoCaoChoThue(hopdongData) {
    try {
      const response = await fetch(
        `${API_BASE_URL}${API_PREFIX}/hop-dong/bao-cao`, 
        {
          method: 'POST',
          headers: getAuthHeaders(),
          body: JSON.stringify(hopdongData)
        }
      );
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi b√°o c√°o h·ª£p ƒë·ªìng:', error);
      throw error;
    }
  }
};

/**
 * Service cho Khu v·ª±c
 */
export const KhuVucService = {
  async layDanhSach(parentId = null) {
    try {
      const qs = parentId === null || parentId === undefined || parentId === '' ? '' : `?parentId=${parentId}`;
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/khu-vuc${qs}`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      const data = await handleResponse(response);
      return data?.data ?? data ?? [];
    } catch (error) {
      throw new Error(`L·ªói l·∫•y danh s√°ch khu v·ª±c: ${error.message}`);
    }
  }
};

/**
 * Service chung cho c√°c utility functions
 */
export const ApiService = {
  /**
   * Test k·∫øt n·ªëi API
   */
  async testConnection() {
    try {
      const response = await fetch(`${API_BASE_URL}${API_PREFIX}/dashboard`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      
      return response.ok;
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi API:', error);
      return false;
    }
  },

  /**
   * L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
   */
  async getCurrentUser() {
    try {
      const response = await fetch(`${API_BASE_URL}/api/users/profile`, {
        method: 'GET',
        headers: getAuthHeaders()
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
      throw error;
    }
  },

  /**
   * Upload file
   */
  async uploadFile(file, path = 'general') {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('path', path);

      const token = localStorage.getItem('token');
      const response = await fetch(`${API_BASE_URL}/api/upload`, {
        method: 'POST',
        headers: {
          'Authorization': token ? `Bearer ${token}` : ''
          // Kh√¥ng set Content-Type khi upload file, ƒë·ªÉ browser t·ª± set
        },
        body: formData
      });
      
      return await handleResponse(response);
    } catch (error) {
      console.error('L·ªói khi upload file:', error);
      throw error;
    }
  }
};

/**
 * Constants cho c√°c enum values
 */
export const CONSTANTS = {
  TRANG_THAI_TIN_DANG: {
    NHAP: 'Nhap',
    CHO_DUYET: 'ChoDuyet', 
    DA_DUYET: 'DaDuyet',
    DA_DANG: 'DaDang',
    TAM_NGUNG: 'TamNgung',
    TU_CHOI: 'TuChoi',
    LUU_TRU: 'LuuTru'
  },
  
  TRANG_THAI_CUOC_HEN: {
    DA_YEU_CAU: 'DaYeuCau',
    CHO_XAC_NHAN: 'ChoXacNhan',
    DA_XAC_NHAN: 'DaXacNhan',
    DA_DOI_LICH: 'DaDoiLich',
    HUY_BOI_KHACH: 'HuyBoiKhach',
    HUY_BOI_HE_THONG: 'HuyBoiHeThong',
    KHACH_KHONG_DEN: 'KhachKhongDen',
    HOAN_THANH: 'HoanThanh'
  },

  LOAI_COC: {
    COC_GIU_CHO: 'CocGiuCho',
    COC_AN_NINH: 'CocAnNinh'
  }
};

/**
 * Utility functions
 */
export const Utils = {
  /**
   * Format s·ªë ti·ªÅn VND
   */
  formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  },

  /**
   * Format ng√†y th√°ng
   */
  formatDate(date, options = {}) {
    return new Date(date).toLocaleDateString('vi-VN', options);
  },

  /**
   * Format ng√†y gi·ªù
   */
  formatDateTime(datetime) {
    return new Date(datetime).toLocaleString('vi-VN');
  },

  /**
   * Debounce function cho search
   */
  debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }
};

// NOTE: T·∫•t c·∫£ services ƒë√£ ƒë∆∞·ª£c export tr·ª±c ti·∫øp (export const X = {...})
// Kh√¥ng c·∫ßn named exports block ƒë·ªÉ tr√°nh duplicate exports

// Default export cho backward compatibility
export default {
  DashboardService,
  TinDangService,
  CuocHenService,
  BaoCaoService,
  DuAnService,
  PhongService,
  HopDongService,
  KhuVucService,
  ApiService,
  CONSTANTS,
  Utils
};
