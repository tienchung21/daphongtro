/**
 * Custom Hooks cho Dashboard & B√°o c√°o Ch·ªß d·ª± √°n
 * S·ª≠ d·ª•ng @tanstack/react-query cho data fetching & caching
 */

import { useQuery } from '@tanstack/react-query';
import { DashboardService, BaoCaoService } from '../services/ChuDuAnService';

/**
 * Hook l·∫•y d·ªØ li·ªáu Dashboard (Quick metrics)
 * S·ª≠ d·ª•ng trong: Dashboard.jsx
 * Cache: 5 ph√∫t
 * 
 * S·ª≠ d·ª•ng DashboardService.layDashboard() ‚Üí endpoint /dashboard
 * Tr·∫£ v·ªÅ flat structure ph√π h·ª£p v·ªõi Dashboard UI
 */
export const useDashboardData = () => {
  return useQuery({
    queryKey: ['dashboard'],
    queryFn: async () => {
      const response = await DashboardService.layDashboard();
      console.log('üìä Dashboard Response:', response);
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard');
      }
      console.log('‚úÖ Dashboard Data:', response.data);
      return response.data;
    },
    staleTime: 5 * 60 * 1000, // Cache 5 ph√∫t
    retry: 2, // Retry 2 l·∫ßn cho dashboard (quan tr·ªçng)
  });
};

/**
 * Hook l·∫•y b√°o c√°o hi·ªáu su·∫•t t·ªïng quan
 * S·ª≠ d·ª•ng trong: Dashboard.jsx (n·∫øu c·∫ßn)
 * Cache: 10 ph√∫t
 */
export const useBaoCaoData = (filters) => {
  return useQuery({
    queryKey: ['bao-cao', filters],
    queryFn: async () => {
      const response = await BaoCaoService.layBaoCaoHieuSuat(filters);
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i b√°o c√°o');
      }
      return response.data;
    },
    enabled: !!(filters.tuNgay && filters.denNgay), // Ch·ªâ fetch khi c√≥ date range
    staleTime: 10 * 60 * 1000, // Cache 10 ph√∫t
  });
};

/**
 * Hook l·∫•y b√°o c√°o chi ti·∫øt (Enhanced version)
 * S·ª≠ d·ª•ng trong: BaoCaoHieuSuat.jsx
 * Cache: 10 ph√∫t
 */
export const useBaoCaoChiTiet = (filters) => {
  return useQuery({
    queryKey: ['bao-cao-chi-tiet', filters],
    queryFn: async () => {
      const response = await BaoCaoService.layBaoCaoChiTiet(filters);
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i b√°o c√°o chi ti·∫øt');
      }
      return response.data;
    },
    enabled: !!(filters.tuNgay && filters.denNgay),
    staleTime: 10 * 60 * 1000,
    retry: 2,
  });
};

/**
 * Hook l·∫•y doanh thu theo th√°ng (6 th√°ng)
 * S·ª≠ d·ª•ng trong: BaoCaoHieuSuat.jsx (Line Chart)
 */
export const useDoanhThuTheoThang = () => {
  return useQuery({
    queryKey: ['doanh-thu-theo-thang'],
    queryFn: async () => {
      const response = await BaoCaoService.layDoanhThuTheoThang();
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i doanh thu');
      }
      return response.data;
    },
    staleTime: 15 * 60 * 1000, // Cache 15 ph√∫t (historical data √≠t thay ƒë·ªïi)
  });
};

/**
 * Hook l·∫•y Top 5 tin ƒëƒÉng
 * S·ª≠ d·ª•ng trong: BaoCaoHieuSuat.jsx (Bar Chart)
 */
export const useTopTinDang = (filters) => {
  return useQuery({
    queryKey: ['top-tin-dang', filters],
    queryFn: async () => {
      const response = await BaoCaoService.layTopTinDang(filters);
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i top tin ƒëƒÉng');
      }
      return response.data;
    },
    enabled: !!(filters.tuNgay && filters.denNgay),
    staleTime: 10 * 60 * 1000,
  });
};

/**
 * Hook l·∫•y Conversion Rate
 * S·ª≠ d·ª•ng trong: BaoCaoHieuSuat.jsx (KPI Card)
 */
export const useConversionRate = (filters) => {
  return useQuery({
    queryKey: ['conversion-rate', filters],
    queryFn: async () => {
      const response = await BaoCaoService.layConversionRate(filters);
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫£i conversion rate');
      }
      return response.data;
    },
    enabled: !!(filters.tuNgay && filters.denNgay),
    staleTime: 10 * 60 * 1000,
  });
};
