/**
 * Script ki·ªÉm tra nhanh API endpoints c·ªßa Ph√≤ng Redesign
 * Ch·∫°y: node docs/test-phong-endpoints.js
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000';
const TEST_TOKEN = 'your-test-token-here'; // Thay b·∫±ng token th·ª±c t·ª´ localStorage

// M√†u s·∫Øc cho console
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Bearer ${TEST_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function test() {
  log('\nüß™ B·∫ÆT ƒê·∫¶U TEST PH√íNG REDESIGN API\n', 'blue');
  
  const testDuAnID = 1; // Thay b·∫±ng ID d·ª± √°n test th·ª±c t·∫ø
  let testPhongID = null;
  let testTinDangID = null;
  
  try {
    // ========== TEST 1: L·∫•y danh s√°ch ph√≤ng ==========
    log('TEST 1: GET /api/chu-du-an/du-an/:duAnID/phong', 'yellow');
    try {
      const response = await api.get(`/api/chu-du-an/du-an/${testDuAnID}/phong`);
      
      if (response.data.success && Array.isArray(response.data.data)) {
        log(`‚úÖ PASS - L·∫•y ƒë∆∞·ª£c ${response.data.data.length} ph√≤ng`, 'green');
        log(`   Ph√≤ng ƒë·∫ßu ti√™n: ${JSON.stringify(response.data.data[0], null, 2)}`, 'reset');
        
        if (response.data.data.length > 0) {
          testPhongID = response.data.data[0].PhongID;
          
          // Verify fields
          const phong = response.data.data[0];
          const requiredFields = ['PhongID', 'TenPhong', 'TrangThai', 'GiaChuan', 'DienTichChuan', 'SoTinDangDangDung'];
          const missingFields = requiredFields.filter(f => !(f in phong));
          
          if (missingFields.length === 0) {
            log('   ‚úì T·∫•t c·∫£ fields b·∫Øt bu·ªôc ƒë·ªÅu c√≥', 'green');
          } else {
            log(`   ‚ö† Thi·∫øu fields: ${missingFields.join(', ')}`, 'red');
          }
        }
      } else {
        log('‚ùå FAIL - Response kh√¥ng ƒë√∫ng format', 'red');
      }
    } catch (error) {
      log(`‚ùå FAIL - ${error.message}`, 'red');
      if (error.response) {
        log(`   Status: ${error.response.status}`, 'red');
        log(`   Data: ${JSON.stringify(error.response.data)}`, 'red');
      }
    }
    
    // ========== TEST 2: T·∫°o ph√≤ng m·ªõi ==========
    log('\nTEST 2: POST /api/chu-du-an/du-an/:duAnID/phong', 'yellow');
    try {
      const newPhongData = {
        TenPhong: `Test-${Date.now()}`,
        GiaChuan: 3000000,
        DienTichChuan: 25,
        MoTaPhong: 'Ph√≤ng test t·ª± ƒë·ªông',
        TrangThai: 'Trong'
      };
      
      const response = await api.post(`/api/chu-du-an/du-an/${testDuAnID}/phong`, newPhongData);
      
      if (response.data.success && response.data.data?.PhongID) {
        testPhongID = response.data.data.PhongID;
        log(`‚úÖ PASS - T·∫°o ph√≤ng th√†nh c√¥ng, PhongID: ${testPhongID}`, 'green');
      } else {
        log('‚ùå FAIL - Kh√¥ng t·∫°o ƒë∆∞·ª£c ph√≤ng', 'red');
      }
    } catch (error) {
      log(`‚ùå FAIL - ${error.message}`, 'red');
      if (error.response) {
        log(`   ${JSON.stringify(error.response.data)}`, 'red');
      }
    }
    
    // ========== TEST 3: L·∫•y chi ti·∫øt ph√≤ng ==========
    if (testPhongID) {
      log('\nTEST 3: GET /api/chu-du-an/phong/:phongID', 'yellow');
      try {
        const response = await api.get(`/api/chu-du-an/phong/${testPhongID}`);
        
        if (response.data.success && response.data.data) {
          log('‚úÖ PASS - L·∫•y chi ti·∫øt ph√≤ng th√†nh c√¥ng', 'green');
          log(`   Ph√≤ng: ${response.data.data.TenPhong}`, 'reset');
          log(`   Tin ƒëƒÉng ƒëang d√πng: ${response.data.data.DanhSachTinDang?.length || 0}`, 'reset');
        } else {
          log('‚ùå FAIL - Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt', 'red');
        }
      } catch (error) {
        log(`‚ùå FAIL - ${error.message}`, 'red');
      }
    }
    
    // ========== TEST 4: T·∫°o tin ƒëƒÉng v·ªõi PhongIDs ==========
    if (testPhongID) {
      log('\nTEST 4: POST /api/chu-du-an/tin-dang (v·ªõi PhongIDs)', 'yellow');
      try {
        const tinDangData = {
          DuAnID: testDuAnID,
          TieuDe: `Test tin ƒëƒÉng ${Date.now()}`,
          MoTa: 'Tin ƒëƒÉng test t·ª± ƒë·ªông',
          KhuVucID: 1,
          ChinhSachCocID: 1,
          URL: [],
          TienIch: ['WiFi', 'M√°y l·∫°nh'],
          TrangThai: 'Nhap',
          PhongIDs: [
            {
              PhongID: testPhongID,
              GiaTinDang: 2800000,
              MoTaTinDang: '∆Øu ƒë√£i test'
            }
          ]
        };
        
        const response = await api.post('/api/chu-du-an/tin-dang', tinDangData);
        
        if (response.data.success && response.data.data?.TinDangID) {
          testTinDangID = response.data.data.TinDangID;
          log(`‚úÖ PASS - T·∫°o tin ƒëƒÉng th√†nh c√¥ng, TinDangID: ${testTinDangID}`, 'green');
        } else {
          log('‚ùå FAIL - Kh√¥ng t·∫°o ƒë∆∞·ª£c tin ƒëƒÉng', 'red');
        }
      } catch (error) {
        log(`‚ùå FAIL - ${error.message}`, 'red');
        if (error.response) {
          log(`   ${JSON.stringify(error.response.data)}`, 'red');
        }
      }
    }
    
    // ========== TEST 5: Verify phong_tindang ==========
    if (testTinDangID && testPhongID) {
      log('\nTEST 5: Verify phong_tindang mapping', 'yellow');
      try {
        const response = await api.get(`/api/chu-du-an/tin-dang/${testTinDangID}`);
        
        if (response.data.success && response.data.data?.DanhSachPhong) {
          const phongTrongTin = response.data.data.DanhSachPhong.find(p => p.PhongID === testPhongID);
          
          if (phongTrongTin) {
            log('‚úÖ PASS - Ph√≤ng ƒë√£ ƒë∆∞·ª£c map v√†o tin ƒëƒÉng', 'green');
            log(`   Gi√° override: ${phongTrongTin.Gia?.toLocaleString()}ƒë`, 'reset');
            log(`   M√¥ t·∫£ override: ${phongTrongTin.MoTa || '(d√πng m·∫∑c ƒë·ªãnh)'}`, 'reset');
            
            // Verify override value
            if (phongTrongTin.Gia === 2800000) {
              log('   ‚úì GiaTinDang override ƒë√∫ng', 'green');
            } else {
              log(`   ‚ö† GiaTinDang kh√¥ng ƒë√∫ng (expect 2800000, got ${phongTrongTin.Gia})`, 'red');
            }
          } else {
            log('‚ùå FAIL - Kh√¥ng t√¨m th·∫•y ph√≤ng trong tin ƒëƒÉng', 'red');
          }
        } else {
          log('‚ùå FAIL - Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt tin ƒëƒÉng', 'red');
        }
      } catch (error) {
        log(`‚ùå FAIL - ${error.message}`, 'red');
      }
    }
    
    // ========== TEST 6: C·∫≠p nh·∫≠t ph√≤ng ==========
    if (testPhongID) {
      log('\nTEST 6: PUT /api/chu-du-an/phong/:phongID', 'yellow');
      try {
        const updateData = {
          GiaChuan: 3200000,
          MoTaPhong: 'ƒê√£ c·∫≠p nh·∫≠t qua test'
        };
        
        const response = await api.put(`/api/chu-du-an/phong/${testPhongID}`, updateData);
        
        if (response.data.success) {
          log('‚úÖ PASS - C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng', 'green');
        } else {
          log('‚ùå FAIL - Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c', 'red');
        }
      } catch (error) {
        log(`‚ùå FAIL - ${error.message}`, 'red');
      }
    }
    
    // ========== TEST 7: X√≥a ph√≤ng (n·∫øu ch∆∞a c√≥ tin ƒëƒÉng) ==========
    // Skip test n√†y v√¨ ƒë√£ c√≥ tin ƒëƒÉng s·ª≠ d·ª•ng ph√≤ng
    log('\nTEST 7: DELETE /api/chu-du-an/phong/:phongID', 'yellow');
    log('‚è≠Ô∏è  SKIP - Ph√≤ng ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi tin ƒëƒÉng, kh√¥ng th·ªÉ x√≥a', 'magenta');
    
  } catch (error) {
    log(`\n‚ùå L·ªñI CHUNG: ${error.message}`, 'red');
  }
  
  log('\n‚úÖ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TESTS\n', 'blue');
  log('üìù Ghi ch√∫:', 'yellow');
  log('   - Ph√≤ng test v√† tin ƒëƒÉng test v·∫´n c√≤n trong DB', 'reset');
  log('   - C√≥ th·ªÉ x√≥a th·ªß c√¥ng qua SQL ho·∫∑c UI', 'reset');
  log('   - ƒê·ªÉ test l·∫°i, thay ƒë·ªïi TEST_TOKEN v√† testDuAnID', 'reset');
}

// Check xem c√≥ token kh√¥ng
if (TEST_TOKEN === 'your-test-token-here') {
  log('\n‚ö†Ô∏è  C·∫¢NH B√ÅO: Vui l√≤ng thay TEST_TOKEN b·∫±ng token th·ª±c t·∫ø', 'red');
  log('   1. Login v√†o h·ªá th·ªëng', 'yellow');
  log('   2. M·ªü DevTools > Application > Local Storage', 'yellow');
  log('   3. Copy gi√° tr·ªã c·ªßa key "token"', 'yellow');
  log('   4. Paste v√†o bi·∫øn TEST_TOKEN ·ªü ƒë·∫ßu file n√†y\n', 'yellow');
  process.exit(1);
}

// Ch·∫°y test
test().catch(error => {
  log(`\n‚ùå CRITICAL ERROR: ${error.message}`, 'red');
  process.exit(1);
});
