/**
 * Middleware ph√¢n quy·ªÅn d·ª±a tr√™n vai tr√≤
 * Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p endpoint kh√¥ng
 */

const db = require('../config/db');

/**
 * T·∫°o middleware ki·ªÉm tra vai tr√≤
 * @param {Array<string>} allowedRoles Danh s√°ch vai tr√≤ ƒë∆∞·ª£c ph√©p truy c·∫≠p
 * @returns {Function} Middleware function
 */
const roleMiddleware = (allowedRoles = []) => {
  return async (req, res, next) => {
    try {
      // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng tin user t·ª´ authMiddleware ch∆∞a
      if (!req.user) {
        return res.status(401).json({
          success: false,
          message: 'Ch∆∞a x√°c th·ª±c ng∆∞·ªùi d√πng'
        });
      }

      // N·∫øu l√† mock user (development) th√¨ bypass ki·ªÉm tra DB
      if (req.user.isMockUser) {
        const mockRoleName = req.user.vaiTro || process.env.MOCK_ROLE_NAME || 'ChuDuAn';
        req.user.vaiTros = [mockRoleName];

        const hasMockPermission =
          allowedRoles.length === 0 || allowedRoles.includes(mockRoleName);

        if (!hasMockPermission) {
          return res.status(403).json({
            success: false,
            message: `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Y√™u c·∫ßu vai tr√≤: ${allowedRoles.join(', ')}`
          });
        }

        req.user.coQuyenTruyCap = true;
        return next();
      }

      // L·∫•y t·∫•t c·∫£ vai tr√≤ c·ªßa ng∆∞·ªùi d√πng
      const [userRoles] = await db.execute(`
        SELECT vt.TenVaiTro, nvt.VaiTroID
        FROM nguoidung_vaitro nvt
        INNER JOIN vaitro vt ON nvt.VaiTroID = vt.VaiTroID
        WHERE nvt.NguoiDungID = ? AND nvt.TrangThai = 'HoatDong'
      `, [req.user.id]);

      if (userRoles.length === 0) {
        return res.status(403).json({
          success: false,
          message: 'Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c g√°n vai tr√≤'
        });
      }

      // Chu·∫©n h√≥a t√™n vai tr√≤ t·ª´ database (b·ªè d·∫•u v√† kho·∫£ng tr·∫Øng)
      const normalizeRoleName = (name) => {
        return name
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '') // B·ªè d·∫•u ti·∫øng Vi·ªát
          .replace(/\s+/g, '') // B·ªè kho·∫£ng tr·∫Øng
          .replace(/[ƒëƒê]/g, match => match === 'ƒë' ? 'd' : 'D'); // ƒê·ªïi ƒë ‚Üí d
      };

      // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
      const userRoleNames = userRoles.map(role => role.TenVaiTro);
      const normalizedUserRoles = userRoleNames.map(normalizeRoleName);
      
      console.log('üîê [ROLE] Raw roles:', userRoleNames);
      console.log('üîê [ROLE] Normalized roles:', normalizedUserRoles);
      console.log('üîê [ROLE] Allowed roles:', allowedRoles);
      
      const hasPermission = allowedRoles.some(role => normalizedUserRoles.includes(role));
      console.log('üîê [ROLE] Has permission:', hasPermission);

      if (!hasPermission) {
        return res.status(403).json({
          success: false,
          message: `Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Y√™u c·∫ßu vai tr√≤: ${allowedRoles.join(', ')}`
        });
      }

      // G·∫Øn th√¥ng tin vai tr√≤ v√†o request
      req.user.vaiTros = normalizedUserRoles; // T√™n ƒë√£ chu·∫©n h√≥a
      req.user.vaiTrosGoc = userRoleNames; // T√™n g·ªëc ƒë·ªÉ hi·ªÉn th·ªã
      req.user.coQuyenTruyCap = true;

      next();
    } catch (error) {
      console.error('L·ªói ki·ªÉm tra ph√¢n quy·ªÅn:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi ki·ªÉm tra quy·ªÅn truy c·∫≠p'
      });
    }
  };
};

/**
 * Helper: enforce exactly one role.
 * @param {string} roleName - required role
 * @returns {Function} Express middleware
 */
const requireRole = (roleName) => {
  if (!roleName) {
    throw new Error('requireRole y√™u c·∫ßu t√™n vai tr√≤ h·ª£p l·ªá');
  }
  return roleMiddleware([roleName]);
};

/**
 * Helper: enforce one of multiple roles.
 * @param {string[]} roleNames - allowed roles
 * @returns {Function} Express middleware
 */
const requireRoles = (roleNames = []) => {
  if (!Array.isArray(roleNames)) {
    throw new Error('requireRoles y√™u c·∫ßu danh s√°ch vai tr√≤ d·∫°ng m·∫£ng');
  }
  return roleMiddleware(roleNames);
};

/**
 * Middleware ki·ªÉm tra quy·ªÅn ch·ªß s·ªü h·ªØu t√†i nguy√™n
 * ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ch·ªâ c√≥ th·ªÉ truy c·∫≠p t√†i nguy√™n c·ªßa ch√≠nh h·ªç
 */
const ownershipMiddleware = (resourceType, idParam = 'id') => {
  return async (req, res, next) => {
    try {
      const resourceId = req.params[idParam];
      const userId = req.user.id;

      let query = '';
      let params = [];

      switch (resourceType) {
        case 'TinDang':
          query = `
            SELECT td.TinDangID 
            FROM tindang td
            INNER JOIN duan da ON td.DuAnID = da.DuAnID
            WHERE td.TinDangID = ? AND da.ChuDuAnID = ?
          `;
          params = [resourceId, userId];
          break;

        case 'CuocHen':
          query = `
            SELECT ch.CuocHenID
            FROM cuochen ch
            INNER JOIN tindang td ON ch.TinDangID = td.TinDangID
            INNER JOIN duan da ON td.DuAnID = da.DuAnID
            WHERE ch.CuocHenID = ? AND da.ChuDuAnID = ?
          `;
          params = [resourceId, userId];
          break;

        case 'DuAn':
          query = 'SELECT DuAnID FROM duan WHERE DuAnID = ? AND ChuDuAnID = ?';
          params = [resourceId, userId];
          break;

        default:
          return res.status(400).json({
            success: false,
            message: 'Lo·∫°i t√†i nguy√™n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'
          });
      }

      const [rows] = await db.execute(query, params);

      if (rows.length === 0) {
        return res.status(403).json({
          success: false,
          message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y'
        });
      }

      next();
    } catch (error) {
      console.error('L·ªói ki·ªÉm tra quy·ªÅn s·ªü h·ªØu:', error);
      res.status(500).json({
        success: false,
        message: 'L·ªói server khi ki·ªÉm tra quy·ªÅn s·ªü h·ªØu'
      });
    }
  };
};

/**
 * Middleware cho ph√©p act-as (chuy·ªÉn ƒë·ªïi vai tr√≤)
 * Cho ph√©p ng∆∞·ªùi d√πng c√≥ nhi·ªÅu vai tr√≤ ho·∫°t ƒë·ªông v·ªõi vai tr√≤ kh√°c
 */
const actAsMiddleware = () => {
  return async (req, res, next) => {
    try {
      const actAsRole = req.header('X-Act-As-Role');
      
      if (actAsRole && req.user.vaiTros && req.user.vaiTros.includes(actAsRole)) {
        // Ghi log act-as action
        const NhatKyHeThongService = require('../services/NhatKyHeThongService');
        await NhatKyHeThongService.ghiNhan(
          req.user.id,
          'act_as_role',
          'NguoiDung',
          req.user.id,
          { vaiTroHienTai: req.user.vaiTro },
          { vaiTroActAs: actAsRole },
          req.ip,
          req.get('User-Agent')
        );

        // C·∫≠p nh·∫≠t vai tr√≤ hi·ªán t·∫°i
        req.user.vaiTroActAs = actAsRole;
        req.user.isActingAs = true;
      }

      next();
    } catch (error) {
      console.error('L·ªói act-as middleware:', error);
      next(); // Kh√¥ng ch·∫∑n request n·∫øu c√≥ l·ªói
    }
  };
};

module.exports = {
  roleMiddleware,
  requireRole,
  requireRoles,
  ownershipMiddleware,
  actAsMiddleware
};
