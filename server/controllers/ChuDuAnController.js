/**
 * Controller cho Ch·ªß d·ª± √°n
 * X·ª≠ l√Ω c√°c request li√™n quan ƒë·∫øn nghi·ªáp v·ª• c·ªßa ch·ªß d·ª± √°n
 */

const ChuDuAnModel = require('../models/ChuDuAnModel');
const NhatKyHeThongService = require('../services/NhatKyHeThongService');

/**
 * @typedef {Object} ResponseFormat
 * @property {boolean} success
 * @property {string} message
 * @property {*} data
 */

class ChuDuAnController {
  /**
   * UC-PROJ-01: ƒêƒÉng tin cho thu√™
   * POST /api/chu-du-an/tin-dang
   */
  static async taoTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id; // T·ª´ middleware auth
      const tinDangData = req.body;

      console.log('üì• Backend nh·∫≠n d·ªØ li·ªáu:', JSON.stringify(tinDangData, null, 2));

      // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!tinDangData.DuAnID || !tinDangData.TieuDe) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: DuAnID, TieuDe'
        });
      }

      // B·∫Øt bu·ªôc ph·∫£i ch·ªçn ph√≤ng t·ª´ danh s√°ch d·ª± √°n
      if (!Array.isArray(tinDangData.PhongIDs) || tinDangData.PhongIDs.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Tin ƒëƒÉng ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt ph√≤ng t·ª´ d·ª± √°n'
        });
      }

      const phongIdKhongHopLe = tinDangData.PhongIDs.some(item => !item || !item.PhongID);
      if (phongIdKhongHopLe) {
        return res.status(400).json({
          success: false,
          message: 'Danh s√°ch ph√≤ng kh√¥ng h·ª£p l·ªá'
        });
      }

      const tinDangId = await ChuDuAnModel.taoTinDang(chuDuAnId, tinDangData);

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'tao_tin_dang',
        'TinDang',
        tinDangId,
        null,
        { trangThai: 'Nhap', tieuDe: tinDangData.TieuDe },
        req.ip,
        req.get('User-Agent')
      );

      res.status(201).json({
        success: true,
        message: 'T·∫°o tin ƒëƒÉng th√†nh c√¥ng',
        data: { tinDangId }
      });
    } catch (error) {
      console.error('L·ªói t·∫°o tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-01: L·∫•y danh s√°ch tin ƒëƒÉng c·ªßa ch·ªß d·ª± √°n
   * GET /api/chu-du-an/tin-dang
   */
  static async layDanhSachTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        trangThai: req.query.trangThai,
        duAnId: req.query.duAnId,
        keyword: req.query.keyword,
        limit: req.query.limit || 20
      };

      const danhSach = await ChuDuAnModel.layDanhSachTinDang(chuDuAnId, filters);

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch tin ƒëƒÉng th√†nh c√¥ng',
        data: {
          tinDangs: danhSach,
          tongSo: danhSach.length,
          filters: filters
        }
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-01: L·∫•y chi ti·∫øt tin ƒëƒÉng
   * GET /api/chu-du-an/tin-dang/:id
   */
  static async layChiTietTinDang(req, res) {
    try {
      // üß™ DEV: Allow testing without auth (fallback to owner ID from DB)
      const chuDuAnId = req.user?.id || null; // NULL allows fetching without ownership check
      const tinDangId = parseInt(req.params.id);

      if (!tinDangId) {
        return res.status(400).json({
          success: false,
          message: 'ID tin ƒëƒÉng kh√¥ng h·ª£p l·ªá'
        });
      }

      const tinDang = await ChuDuAnModel.layChiTietTinDang(tinDangId, chuDuAnId);

      if (!tinDang) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y tin ƒëƒÉng ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      res.json({
        success: true,
        message: 'L·∫•y chi ti·∫øt tin ƒëƒÉng th√†nh c√¥ng',
        data: tinDang
      });
    } catch (error) {
      console.error('L·ªói l·∫•y chi ti·∫øt tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y danh s√°ch ph√≤ng c·ªßa tin ƒëƒÉng
   * GET /api/chu-du-an/tin-dang/:id/phong
   */
  static async layDanhSachPhong(req, res) {
    try {
      const tinDangId = parseInt(req.params.id);
      
      if (!tinDangId) {
        return res.status(400).json({
          success: false,
          message: 'ID tin ƒëƒÉng kh√¥ng h·ª£p l·ªá'
        });
      }

      const phongs = await ChuDuAnModel.layDanhSachPhong(tinDangId);

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch ph√≤ng th√†nh c√¥ng',
        data: phongs
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch ph√≤ng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-01: C·∫≠p nh·∫≠t tin ƒëƒÉng
   * PUT /api/chu-du-an/tin-dang/:id
   */
  static async capNhatTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const tinDangId = parseInt(req.params.id);
      const updateData = req.body;

      if (!tinDangId) {
        return res.status(400).json({
          success: false,
          message: 'ID tin ƒëƒÉng kh√¥ng h·ª£p l·ªá'
        });
      }

      const ketQua = await ChuDuAnModel.capNhatTinDang(tinDangId, chuDuAnId, updateData);

      if (ketQua) {
        // Ghi audit log
        await NhatKyHeThongService.ghiNhan(
          chuDuAnId,
          'cap_nhat_tin_dang',
          'TinDang',
          tinDangId,
          { trangThai: 'C≈©' },
          { trangThai: 'Nhap', ...updateData },
          req.ip,
          req.get('User-Agent')
        );

        res.json({
          success: true,
          message: 'C·∫≠p nh·∫≠t tin ƒëƒÉng th√†nh c√¥ng'
        });
      }
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-01: G·ª≠i tin ƒëƒÉng ƒë·ªÉ duy·ªát
   * POST /api/chu-du-an/tin-dang/:id/gui-duyet
   */
  static async guiTinDangDeDuyet(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const tinDangId = parseInt(req.params.id);

      if (!tinDangId) {
        return res.status(400).json({
          success: false,
          message: 'ID tin ƒëƒÉng kh√¥ng h·ª£p l·ªá'
        });
      }

      const ketQua = await ChuDuAnModel.guiTinDangDeDuyet(tinDangId, chuDuAnId);

      if (ketQua) {
        // Ghi audit log
        await NhatKyHeThongService.ghiNhan(
          chuDuAnId,
          'gui_tin_dang_de_duyet',
          'TinDang',
          tinDangId,
          { trangThai: 'Nhap' },
          { trangThai: 'ChoDuyet' },
          req.ip,
          req.get('User-Agent')
        );

        res.json({
          success: true,
          message: 'G·ª≠i tin ƒëƒÉng ƒë·ªÉ duy·ªát th√†nh c√¥ng'
        });
      }
    } catch (error) {
      console.error('L·ªói g·ª≠i tin ƒëƒÉng ƒë·ªÉ duy·ªát:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-02: Qu·∫£n l√Ω cu·ªôc h·∫πn xem ph√≤ng
   * GET /api/chu-du-an/cuoc-hen
   */
  static async layDanhSachCuocHen(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        trangThai: req.query.trangThai,
        tinDangId: req.query.tinDangId,
        tuNgay: req.query.tuNgay,
        denNgay: req.query.denNgay,
        limit: req.query.limit || 50
      };

      const danhSach = await ChuDuAnModel.layDanhSachCuocHen(chuDuAnId, filters);

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch cu·ªôc h·∫πn th√†nh c√¥ng',
        data: {
          cuocHens: danhSach,
          tongSo: danhSach.length,
          filters: filters
        }
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch cu·ªôc h·∫πn:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-02: X√°c nh·∫≠n cu·ªôc h·∫πn
   * POST /api/chu-du-an/cuoc-hen/:id/xac-nhan
   */
  static async xacNhanCuocHen(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const cuocHenId = parseInt(req.params.id);
      const { ghiChu } = req.body;

      if (!cuocHenId) {
        return res.status(400).json({
          success: false,
          message: 'ID cu·ªôc h·∫πn kh√¥ng h·ª£p l·ªá'
        });
      }

      const ketQua = await ChuDuAnModel.xacNhanCuocHen(cuocHenId, chuDuAnId, ghiChu);

      if (ketQua) {
        // Ghi audit log
        await NhatKyHeThongService.ghiNhan(
          chuDuAnId,
          'xac_nhan_cuoc_hen',
          'CuocHen',
          cuocHenId,
          { trangThai: 'ChoXacNhan' },
          { trangThai: 'DaXacNhan', ghiChu },
          req.ip,
          req.get('User-Agent')
        );

        res.json({
          success: true,
          message: 'X√°c nh·∫≠n cu·ªôc h·∫πn th√†nh c√¥ng'
        });
      }
    } catch (error) {
      console.error('L·ªói x√°c nh·∫≠n cu·ªôc h·∫πn:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-03: Xem b√°o c√°o hi·ªáu su·∫•t
   * GET /api/chu-du-an/bao-cao
   */
  static async layBaoCaoHieuSuat(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        tuNgay: req.query.tuNgay,
        denNgay: req.query.denNgay
      };

      const baoCao = await ChuDuAnModel.layBaoCaoHieuSuat(chuDuAnId, filters);

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'chu_du_an_xem_bao_cao',
        'BaoCao',
        null,
        null,
        { loaiBaoCao: 'HieuSuat', ...filters },
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'L·∫•y b√°o c√°o hi·ªáu su·∫•t th√†nh c√¥ng',
        data: baoCao
      });
    } catch (error) {
      console.error('L·ªói l·∫•y b√°o c√°o hi·ªáu su·∫•t:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y danh s√°ch d·ª± √°n c·ªßa ch·ªß d·ª± √°n
   * GET /api/chu-du-an/du-an
   */
  static async layDanhSachDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const danhSach = await ChuDuAnModel.layDanhSachDuAn(chuDuAnId);

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch d·ª± √°n th√†nh c√¥ng',
        data: danhSach
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch d·ª± √°n:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  static async layChiTietDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const duAnId = req.params.id;
      const duAn = await ChuDuAnModel.layChiTietDuAn(duAnId, chuDuAnId);
      
      if (!duAn) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n'
        });
      }
      
      res.json({
        success: true,
        data: duAn
      });
    } catch (error) {
      console.error('L·ªói l·∫•y chi ti·∫øt d·ª± √°n:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y danh s√°ch khu v·ª±c theo parent (null = T·ªânh/TP)
   */
  static async layDanhSachKhuVuc(req, res) {
    try {
      let { parentId } = req.query;
      if (parentId === undefined || parentId === null || parentId === '' || parentId === 'null') {
        parentId = null;
      }
      const danhSach = await ChuDuAnModel.layDanhSachKhuVuc(parentId);
      return res.json({ success: true, data: danhSach });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch khu v·ª±c:', error);
      return res.status(500).json({ success: false, message: error.message });
    }
  }

  /**
   * T·∫°o m·ªõi D·ª± √°n (ƒë∆°n gi·∫£n cho Ch·ªß d·ª± √°n t·ª± t·∫°o nhanh khi ƒëƒÉng tin)
   */
  static async taoDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const { TenDuAn, DiaChi } = req.body;
      if (!TenDuAn) {
        return res.status(400).json({ success: false, message: 'Thi·∫øu TenDuAn' });
      }

      const duAnId = await ChuDuAnModel.taoDuAnNhanh({
        TenDuAn,
        DiaChi: DiaChi || '',
        ChuDuAnID: chuDuAnId
      });

      res.status(201).json({ success: true, duAnId });
    } catch (error) {
      res.status(500).json({ success: false, message: error.message });
    }
  }

  static async capNhatDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const duAnId = parseInt(req.params.id, 10);

      if (Number.isNaN(duAnId)) {
        return res.status(400).json({
          success: false,
          message: 'ID d·ª± √°n kh√¥ng h·ª£p l·ªá'
        });
      }

      const allowedFields = [
        'TenDuAn',
        'DiaChi',
        'ViDo',
        'KinhDo',
        'YeuCauPheDuyetChu',
        'PhuongThucVao',
        'TrangThai'
      ];

      const payload = {};
      allowedFields.forEach((field) => {
        if (Object.prototype.hasOwnProperty.call(req.body, field)) {
          payload[field] = req.body[field];
        }
      });

      if (Object.keys(payload).length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t'
        });
      }

      const duAn = await ChuDuAnModel.capNhatDuAn(duAnId, chuDuAnId, payload);

      if (!duAn) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'cap_nhat_du_an',
        'DuAn',
        duAnId,
        null,
        payload,
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t d·ª± √°n th√†nh c√¥ng',
        data: duAn
      });
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t d·ª± √°n:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  static async luuTruDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const duAnId = parseInt(req.params.id, 10);

      if (Number.isNaN(duAnId)) {
        return res.status(400).json({
          success: false,
          message: 'ID d·ª± √°n kh√¥ng h·ª£p l·ªá'
        });
      }

      const lyDo = req.body?.lyDo || null;

      const duAn = await ChuDuAnModel.luuTruDuAn(duAnId, chuDuAnId);

      if (!duAn) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y d·ª± √°n ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'luu_tru_du_an',
        'DuAn',
        duAnId,
        null,
        { lyDo: lyDo || undefined },
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'L∆∞u tr·ªØ d·ª± √°n th√†nh c√¥ng',
        data: duAn
      });
    } catch (error) {
      console.error('L·ªói l∆∞u tr·ªØ d·ª± √°n:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  static async layChiTietChinhSachCoc(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const chinhSachId = parseInt(req.params.id, 10);

      if (Number.isNaN(chinhSachId)) {
        return res.status(400).json({
          success: false,
          message: 'ID ch√≠nh s√°ch kh√¥ng h·ª£p l·ªá'
        });
      }

      const chinhSach = await ChuDuAnModel.layChiTietChinhSachCoc(chuDuAnId, chinhSachId);

      if (!chinhSach) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ch√≠nh s√°ch c·ªçc ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      res.json({
        success: true,
        message: 'L·∫•y chi ti·∫øt ch√≠nh s√°ch c·ªçc th√†nh c√¥ng',
        data: chinhSach
      });
    } catch (error) {
      console.error('L·ªói l·∫•y chi ti·∫øt ch√≠nh s√°ch c·ªçc:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  static async capNhatChinhSachCoc(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const chinhSachId = parseInt(req.params.id, 10);

      if (Number.isNaN(chinhSachId)) {
        return res.status(400).json({
          success: false,
          message: 'ID ch√≠nh s√°ch kh√¥ng h·ª£p l·ªá'
        });
      }

      const allowedFields = [
        'TenChinhSach',
        'MoTa',
        'ChoPhepCocGiuCho',
        'TTL_CocGiuCho_Gio',
        'TyLePhat_CocGiuCho',
        'ChoPhepCocAnNinh',
        'SoTienCocAnNinhMacDinh',
        'QuyTacGiaiToa',
        'HieuLuc'
      ];

      const payload = {};
      allowedFields.forEach((field) => {
        if (Object.prototype.hasOwnProperty.call(req.body, field)) {
          payload[field] = req.body[field];
        }
      });

      if (Object.keys(payload).length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t'
        });
      }

      const chinhSach = await ChuDuAnModel.capNhatChinhSachCoc(chuDuAnId, chinhSachId, payload);

      if (!chinhSach) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ch√≠nh s√°ch c·ªçc ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'cap_nhat_chinh_sach_coc',
        'ChinhSachCoc',
        chinhSachId,
        null,
        payload,
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'C·∫≠p nh·∫≠t ch√≠nh s√°ch c·ªçc th√†nh c√¥ng',
        data: chinhSach
      });
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t ch√≠nh s√°ch c·ªçc:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L∆∞u nh√°p tin ƒëƒÉng
   * POST /api/chu-du-an/tin-dang/nhap
   */
  static async luuNhapTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const tinDangData = {
        ...req.body,
        TrangThai: 'Nhap' // ƒê·∫£m b·∫£o tr·∫°ng th√°i l√† Nh√°p
      };

      // Validate c∆° b·∫£n (kh√¥ng y√™u c·∫ßu ƒë·∫ßy ƒë·ªß nh∆∞ khi g·ª≠i duy·ªát)
      if (!tinDangData.DuAnID) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin d·ª± √°n'
        });
      }

      const tinDangId = await ChuDuAnModel.taoTinDang(chuDuAnId, tinDangData);

      res.status(201).json({
        success: true,
        message: 'L∆∞u nh√°p th√†nh c√¥ng',
        tinDangId
      });
    } catch (error) {
      console.error('L·ªói l∆∞u nh√°p tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-04: B√°o c√°o h·ª£p ƒë·ªìng cho thu√™
   * POST /api/chu-du-an/hop-dong/bao-cao
   */
  static async baoCaoHopDongChoThue(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const { phongId, khachHangId, thongTinHopDong } = req.body;

      if (!phongId || !khachHangId) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin ph√≤ng ho·∫∑c kh√°ch h√†ng'
        });
      }

      // TODO: Implement logic b√°o c√°o h·ª£p ƒë·ªìng
      // - Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu ph√≤ng
      // - Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng (GiuCho)
      // - Ki·ªÉm tra giao d·ªãch c·ªçc h·ª£p l·ªá
      // - Chuy·ªÉn tr·∫°ng th√°i ph√≤ng sang DaThue
      // - Chu·∫©n b·ªã gi·∫£i t·ªèa Ti·ªÅnT·∫°mGi·ªØ

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'bao_cao_hop_dong_thue',
        'Phong',
        phongId,
        { trangThai: 'GiuCho' },
        { trangThai: 'DaThue', khachHangId, ...thongTinHopDong },
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'B√°o c√°o h·ª£p ƒë·ªìng cho thu√™ th√†nh c√¥ng',
        data: {
          phongId,
          khachHangId,
          trangThaiMoi: 'DaThue'
        }
      });
    } catch (error) {
      console.error('L·ªói b√°o c√°o h·ª£p ƒë·ªìng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * T·∫°o nhanh d·ª± √°n (d√πng t·ª´ modal trong trang t·∫°o tin ƒëƒÉng)
   * POST /api/chu-du-an/du-an/tao-nhanh
   */
  static async taoNhanhDuAn(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const { TenDuAn, DiaChi, ViDo, KinhDo, YeuCauPheDuyetChu, PhuongThucVao, TrangThai } = req.body;

      // Validate
      if (!TenDuAn || !TenDuAn.trim()) {
        return res.status(400).json({
          success: false,
          message: 'T√™n d·ª± √°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
        });
      }

      if (!DiaChi || !DiaChi.trim()) {
        return res.status(400).json({
          success: false,
          message: 'ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
        });
      }

      // N·∫øu kh√¥ng y√™u c·∫ßu ph√™ duy·ªát th√¨ ph·∫£i c√≥ ph∆∞∆°ng th·ª©c v√†o
      if (!YeuCauPheDuyetChu && (!PhuongThucVao || !PhuongThucVao.trim())) {
        return res.status(400).json({
          success: false,
          message: 'Ph∆∞∆°ng th·ª©c v√†o d·ª± √°n l√† b·∫Øt bu·ªôc khi kh√¥ng y√™u c·∫ßu ph√™ duy·ªát'
        });
      }

      // T·∫°o d·ª± √°n v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß (bao g·ªìm t·ªça ƒë·ªô)
      const duAnId = await ChuDuAnModel.taoDuAn(chuDuAnId, {
        TenDuAn: TenDuAn.trim(),
        DiaChi: DiaChi.trim(),
        ViDo: ViDo || null,
        KinhDo: KinhDo || null,
        YeuCauPheDuyetChu: YeuCauPheDuyetChu ? 1 : 0,
        PhuongThucVao: YeuCauPheDuyetChu ? null : (PhuongThucVao ? PhuongThucVao.trim() : null),
        TrangThai: TrangThai || 'HoatDong'
      });

      // L·∫•y th√¥ng tin d·ª± √°n v·ª´a t·∫°o
      const duAn = await ChuDuAnModel.layChiTietDuAn(duAnId, chuDuAnId);

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'tao_nhanh_du_an',
        'DuAn',
        duAnId,
        null,
        { tenDuAn: TenDuAn, diaChi: DiaChi },
        req.ip,
        req.get('User-Agent')
      );

      res.status(201).json({
        success: true,
        message: 'T·∫°o d·ª± √°n th√†nh c√¥ng',
        duAn: duAn
      });
    } catch (error) {
      console.error('L·ªói t·∫°o nhanh d·ª± √°n:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * Dashboard t·ªïng quan cho ch·ªß d·ª± √°n
   * GET /api/chu-du-an/dashboard
   */
  static async layDashboard(req, res) {
    try {
      const chuDuAnId = req.user.id;
      
      // L·∫•y th·ªëng k√™ nhanh v√† d·ªØ li·ªáu c·∫ßn thi·∫øt
      const [tinDangs, cuocHens, duAns, thongKeTong, thongKePhong] = await Promise.all([
        ChuDuAnModel.layDanhSachTinDang(chuDuAnId, { limit: 5 }),
        ChuDuAnModel.layDanhSachCuocHen(chuDuAnId, { limit: 10 }),
        ChuDuAnModel.layDanhSachDuAn(chuDuAnId),
        ChuDuAnModel.layBaoCaoHieuSuat(chuDuAnId),
        ChuDuAnModel.layThongKePhong(chuDuAnId)
      ]);

      const cuocHenSapToi = cuocHens.filter(ch => 
        new Date(ch.ThoiGianHen) > new Date() && 
        ['ChoXacNhan', 'DaXacNhan'].includes(ch.TrangThai)
      );

      const tongQuan = thongKeTong?.tongQuan || {};
      const tuongTac = thongKeTong?.tuongTac || {};
      const coc = thongKeTong?.coc || {};

      const summary = {
        tongTinDang: tongQuan.TongTinDang || 0,
        tinDangDangHoatDong: tongQuan.TinDangDaDang || 0,
        tinDangChoDuyet: tongQuan.TinDangChoDuyet || 0,
        tinDangNhap: tongQuan.TinDangNhap || 0,
        tinDangTamNgung: tongQuan.TinDangTamNgung || 0,
        tinDangDaDuyet: tongQuan.TinDangDaDuyet || 0,
        tinDangTuChoi: tongQuan.TinDangTuChoi || 0,
        giaTrungBinh: tongQuan.GiaTrungBinh || 0,
        tongDienTich: tongQuan.TongDienTich || 0,
        tongPhong: thongKePhong.TongPhong || 0,
        tongPhongTrong: thongKePhong.PhongTrong || 0,
        tongPhongDaThue: thongKePhong.PhongDaThue || 0,
        tongPhongGiuCho: thongKePhong.PhongGiuCho || 0,
        tongPhongDonDep: thongKePhong.PhongDonDep || 0,
        tongLuotXem: tuongTac.TongLuotXem || 0,
        tongYeuThich: tuongTac.TongYeuThich || 0,
        luotXemHomNay: tuongTac.LuotXemHomNay || 0,
        yeuThichHomNay: tuongTac.YeuThichHomNay || 0,
        tongGiaoDichCoc: coc.TongGiaoDichCoc || 0,
        tongTienCoc: coc.TongTienCoc || 0,
        doanhThuThang: coc.TongTienCocThangNay || 0,
        cuocHenSapToi: cuocHenSapToi.length // S·ªë l∆∞·ª£ng cu·ªôc h·∫πn s·∫Øp t·ªõi
      };

      res.json({
        success: true,
        message: 'L·∫•y dashboard th√†nh c√¥ng',
        data: {
          ...summary, // Spread summary v√†o data level ƒë·ªÉ frontend access d·ªÖ h∆°n
          tinDangGanDay: tinDangs,
          cuocHenSapToiList: cuocHenSapToi, // Array cu·ªôc h·∫πn chi ti·∫øt
          duAns
        }
      });
    } catch (error) {
      console.error('L·ªói l·∫•y dashboard:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y tin ƒëƒÉng ƒë·ªÉ ch·ªânh s·ª≠a
   * GET /api/chu-du-an/chinh-sua-tin-dang/:id
   */
  static async layTinDangDeChinhSua(req, res) {
    try {
      const tinDangId = req.params.id;
      const chuDuAnId = req.user.id;

      // L·∫•y chi ti·∫øt tin ƒëƒÉng
      const tinDang = await ChuDuAnModel.layChiTietTinDang(tinDangId, chuDuAnId);

      if (!tinDang) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y tin ƒëƒÉng ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      // L·∫•y danh s√°ch ph√≤ng n·∫øu c√≥
      const danhSachPhong = await ChuDuAnModel.layDanhSachPhong(tinDangId);

      // Audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'xem_tin_dang_de_chinh_sua',
        'TinDang',
        tinDangId,
        null,
        null,
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'L·∫•y th√¥ng tin tin ƒëƒÉng th√†nh c√¥ng',
        data: {
          ...tinDang,
          DanhSachPhong: danhSachPhong
        }
      });
    } catch (error) {
      console.error('L·ªói l·∫•y tin ƒëƒÉng ƒë·ªÉ ch·ªânh s·ª≠a:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t tin ƒëƒÉng (l∆∞u nh√°p ho·∫∑c g·ª≠i duy·ªát)
   * PUT /api/chu-du-an/chinh-sua-tin-dang/:id
   */
  static async capNhatTinDang(req, res) {
    try {
      const tinDangId = req.params.id;
      const chuDuAnId = req.user.id;
      const updateData = req.body;
      const { action } = req.body; // 'save_draft' ho·∫∑c 'send_review'

      console.log('üì• Backend nh·∫≠n d·ªØ li·ªáu c·∫≠p nh·∫≠t:', JSON.stringify(updateData, null, 2));

      // Validate ownership
      const tinDangCu = await ChuDuAnModel.layChiTietTinDang(tinDangId, chuDuAnId);
      if (!tinDangCu) {
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y tin ƒëƒÉng ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
        });
      }

      if (!Array.isArray(updateData.PhongIDs) || updateData.PhongIDs.length === 0) {
        return res.status(400).json({
          success: false,
          message: 'Tin ƒëƒÉng ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt ph√≤ng thu·ªôc d·ª± √°n'
        });
      }

      const phongIdsHopLe = updateData.PhongIDs.every(item => {
        if (typeof item === 'object') {
          return item && item.PhongID;
        }
        return !!item;
      });

      if (!phongIdsHopLe) {
        return res.status(400).json({
          success: false,
          message: 'Danh s√°ch ph√≤ng kh√¥ng h·ª£p l·ªá'
        });
      }

      // Validate d·ªØ li·ªáu n·∫øu g·ª≠i duy·ªát
      if (action === 'send_review') {
        if (!updateData.TieuDe || !updateData.DuAnID) {
          return res.status(400).json({
            success: false,
            message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc khi g·ª≠i duy·ªát'
          });
        }
      }

      // C·∫≠p nh·∫≠t tin ƒëƒÉng
      const result = await ChuDuAnModel.capNhatTinDang(tinDangId, chuDuAnId, updateData);

      // N·∫øu g·ª≠i duy·ªát, chuy·ªÉn tr·∫°ng th√°i sang ChoDuyet
      if (action === 'send_review') {
        await ChuDuAnModel.guiTinDangDeDuyet(tinDangId, chuDuAnId);
        
        // Audit log
        await NhatKyHeThongService.ghiNhan(
          chuDuAnId,
          'gui_duyet_tin_dang',
          'TinDang',
          tinDangId,
          null,
          updateData,
          req.ip,
          req.get('User-Agent')
        );
      } else {
        // Audit log cho l∆∞u nh√°p
        await NhatKyHeThongService.ghiNhan(
          chuDuAnId,
          'luu_nhap_tin_dang',
          'TinDang',
          tinDangId,
          null,
          updateData,
          req.ip,
          req.get('User-Agent')
        );
      }

      res.json({
        success: true,
        message: action === 'send_review' ? 'G·ª≠i duy·ªát tin ƒëƒÉng th√†nh c√¥ng' : 'L∆∞u nh√°p th√†nh c√¥ng',
        data: result
      });
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y danh s√°ch tin nh√°p
   * GET /api/chu-du-an/tin-nhap
   */
  static async layDanhSachTinNhap(req, res) {
    try {
      const chuDuAnId = req.user.id;

      // L·∫•y danh s√°ch tin ƒëƒÉng v·ªõi tr·∫°ng th√°i Nhap
      const tinNhaps = await ChuDuAnModel.layDanhSachTinDang(chuDuAnId, { 
        trangThai: 'Nhap',
        limit: 100
      });

      res.json({
        success: true,
        message: 'L·∫•y danh s√°ch tin nh√°p th√†nh c√¥ng',
        data: tinNhaps
      });
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch tin nh√°p:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * X√≥a tin ƒëƒÉng (chuy·ªÉn sang tr·∫°ng th√°i LuuTru)
   * DELETE /api/chu-du-an/tin-dang/:id
   * Body: { lyDoXoa: string } - B·∫Øt bu·ªôc n·∫øu tin ƒë√£ duy·ªát/ƒëang ƒëƒÉng
   */
  static async xoaTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const tinDangId = parseInt(req.params.id);
      const { lyDoXoa } = req.body;

      if (!tinDangId) {
        return res.status(400).json({
          success: false,
          message: 'ID tin ƒëƒÉng kh√¥ng h·ª£p l·ªá'
        });
      }

      // X√≥a tin ƒëƒÉng (chuy·ªÉn sang LuuTru)
      const result = await ChuDuAnModel.xoaTinDang(tinDangId, chuDuAnId, lyDoXoa);

      // Audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'xoa_tin_dang',
        'TinDang',
        tinDangId,
        null,
        { TrangThai: 'LuuTru', LyDoXoa: lyDoXoa || 'Ch·ªß d·ª± √°n t·ª± x√≥a' },
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'X√≥a tin ƒëƒÉng th√†nh c√¥ng',
        data: result
      });
    } catch (error) {
      console.error('L·ªói x√≥a tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * UC-PROJ-BANNED: G·ª≠i y√™u c·∫ßu m·ªü l·∫°i d·ª± √°n b·ªã banned
   * POST /api/chu-du-an/du-an/:id/yeu-cau-mo-lai
   * 
   * @param {Object} req.params.id - DuAnID
   * @param {Object} req.body.NoiDungGiaiTrinh - N·ªôi dung gi·∫£i tr√¨nh (required, min 50 chars)
   * @param {Object} req.user - Th√¥ng tin Ch·ªß d·ª± √°n t·ª´ JWT
   * @returns {Object} 200 - Success
   * @returns {Object} 400 - Validation errors
   * @returns {Object} 403 - Kh√¥ng c√≥ quy·ªÅn (kh√¥ng ph·∫£i ch·ªß d·ª± √°n)
   * @returns {Object} 404 - D·ª± √°n kh√¥ng t·ªìn t·∫°i
   * @returns {Object} 409 - D·ª± √°n ch∆∞a b·ªã banned ho·∫∑c y√™u c·∫ßu ƒëang x·ª≠ l√Ω
   */
  static async guiYeuCauMoLaiDuAn(req, res) {
    const db = require('../config/db');
    const connection = await db.getConnection();
    
    try {
      const duAnId = parseInt(req.params.id);
      const { NoiDungGiaiTrinh } = req.body;
      const chuDuAnId = req.user.NguoiDungID;

      // Validation
      if (!NoiDungGiaiTrinh || NoiDungGiaiTrinh.trim().length < 50) {
        return res.status(400).json({
          success: false,
          message: 'N·ªôi dung gi·∫£i tr√¨nh ph·∫£i c√≥ √≠t nh·∫•t 50 k√Ω t·ª± ƒë·ªÉ gi·∫£i th√≠ch r√µ l√Ω do',
        });
      }

      if (NoiDungGiaiTrinh.length > 2000) {
        return res.status(400).json({
          success: false,
          message: 'N·ªôi dung gi·∫£i tr√¨nh kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 2000 k√Ω t·ª±',
        });
      }

      await connection.beginTransaction();

      // Ki·ªÉm tra d·ª± √°n v√† quy·ªÅn s·ªü h·ªØu
      const [duAnRows] = await connection.execute(
        `SELECT DuAnID, TenDuAn, ChuDuAnID, TrangThai, YeuCauMoLai, LyDoNgungHoatDong
         FROM duan 
         WHERE DuAnID = ?`,
        [duAnId]
      );

      if (!duAnRows.length) {
        await connection.rollback();
        return res.status(404).json({
          success: false,
          message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i',
        });
      }

      const duAn = duAnRows[0];

      // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
      if (duAn.ChuDuAnID !== chuDuAnId) {
        await connection.rollback();
        return res.status(403).json({
          success: false,
          message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i y√™u c·∫ßu cho d·ª± √°n n√†y',
        });
      }

      // Validate tr·∫°ng th√°i d·ª± √°n
      if (duAn.TrangThai !== 'NgungHoatDong') {
        await connection.rollback();
        return res.status(409).json({
          success: false,
          message: 'D·ª± √°n ch∆∞a b·ªã ng∆∞ng ho·∫°t ƒë·ªông, kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu m·ªü l·∫°i',
        });
      }

      // Validate tr·∫°ng th√°i y√™u c·∫ßu
      if (duAn.YeuCauMoLai === 'DangXuLy') {
        await connection.rollback();
        return res.status(409).json({
          success: false,
          message: 'Y√™u c·∫ßu m·ªü l·∫°i ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω, vui l√≤ng ch·ªù k·∫øt qu·∫£',
        });
      }

      if (duAn.YeuCauMoLai === 'ChapNhan') {
        await connection.rollback();
        return res.status(409).json({
          success: false,
          message: 'D·ª± √°n ƒë√£ ƒë∆∞·ª£c m·ªü l·∫°i tr∆∞·ªõc ƒë√≥',
        });
      }

      // Update y√™u c·∫ßu m·ªü l·∫°i
      await connection.execute(
        `UPDATE duan 
         SET YeuCauMoLai = 'DangXuLy',
             NoiDungGiaiTrinh = ?,
             ThoiGianGuiYeuCau = NOW(),
             CapNhatLuc = NOW()
         WHERE DuAnID = ?`,
        [NoiDungGiaiTrinh.trim(), duAnId]
      );

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan({
        TacNhan: 'ChuDuAn',
        NguoiDungID: chuDuAnId,
        HanhDong: 'GUI_YEU_CAU_MO_LAI_DU_AN',
        DoiTuong: 'DuAn',
        DoiTuongID: duAnId,
        ChiTiet: JSON.stringify({
          TenDuAn: duAn.TenDuAn,
          LyDoNgungHoatDong: duAn.LyDoNgungHoatDong,
          NoiDungGiaiTrinh: NoiDungGiaiTrinh.trim(),
        }),
      });

      await connection.commit();

      // L·∫•y th√¥ng tin sau khi update
      const [updatedRows] = await connection.execute(
        `SELECT 
          DuAnID, TenDuAn, TrangThai, YeuCauMoLai,
          NoiDungGiaiTrinh, ThoiGianGuiYeuCau,
          LyDoNgungHoatDong, NgungHoatDongLuc
         FROM duan 
         WHERE DuAnID = ?`,
        [duAnId]
      );

      return res.status(200).json({
        success: true,
        message: 'ƒê√£ g·ª≠i y√™u c·∫ßu m·ªü l·∫°i d·ª± √°n. Operator s·∫Ω x·ª≠ l√Ω trong v√≤ng 3-5 ng√†y l√†m vi·ªác.',
        data: updatedRows[0],
      });
    } catch (error) {
      await connection.rollback();
      console.error('L·ªói khi g·ª≠i y√™u c·∫ßu m·ªü l·∫°i:', error);
      return res.status(500).json({
        success: false,
        message: 'L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu',
        error: error.message,
      });
    } finally {
      connection.release();
    }
  }

  /**
   * ============================================================================
   * NEW ENDPOINTS CHO B√ÅO C√ÅO CHI TI·∫æT (2025-10-24)
   * ============================================================================
   */

  /**
   * L·∫•y doanh thu theo th√°ng (6 th√°ng g·∫ßn nh·∫•t)
   * GET /api/chu-du-an/bao-cao/doanh-thu-theo-thang
   */
  static async layDoanhThuTheoThang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const data = await ChuDuAnModel.layDoanhThuTheoThang(chuDuAnId);

      res.json({
        success: true,
        message: 'L·∫•y doanh thu theo th√°ng th√†nh c√¥ng',
        data
      });
    } catch (error) {
      console.error('L·ªói l·∫•y doanh thu theo th√°ng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y Top 5 tin ƒëƒÉng hi·ªáu qu·∫£ nh·∫•t
   * GET /api/chu-du-an/bao-cao/top-tin-dang?tuNgay=YYYY-MM-DD&denNgay=YYYY-MM-DD
   */
  static async layTopTinDang(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        tuNgay: req.query.tuNgay,
        denNgay: req.query.denNgay
      };

      const data = await ChuDuAnModel.layTopTinDang(chuDuAnId, filters);

      res.json({
        success: true,
        message: 'L·∫•y top tin ƒëƒÉng th√†nh c√¥ng',
        data
      });
    } catch (error) {
      console.error('L·ªói l·∫•y top tin ƒëƒÉng:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y Conversion Rate
   * GET /api/chu-du-an/bao-cao/conversion-rate?tuNgay=YYYY-MM-DD&denNgay=YYYY-MM-DD
   */
  static async layConversionRate(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        tuNgay: req.query.tuNgay,
        denNgay: req.query.denNgay
      };

      const data = await ChuDuAnModel.layConversionRate(chuDuAnId, filters);

      res.json({
        success: true,
        message: 'L·∫•y conversion rate th√†nh c√¥ng',
        data
      });
    } catch (error) {
      console.error('L·ªói l·∫•y conversion rate:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }

  /**
   * L·∫•y b√°o c√°o chi ti·∫øt (Enhanced version v·ªõi t·∫•t c·∫£ metrics)
   * GET /api/chu-du-an/bao-cao-chi-tiet?tuNgay=YYYY-MM-DD&denNgay=YYYY-MM-DD
   */
  static async layBaoCaoHieuSuatChiTiet(req, res) {
    try {
      const chuDuAnId = req.user.id;
      const filters = {
        tuNgay: req.query.tuNgay,
        denNgay: req.query.denNgay
      };

      const data = await ChuDuAnModel.layBaoCaoHieuSuatChiTiet(chuDuAnId, filters);

      // Ghi audit log
      await NhatKyHeThongService.ghiNhan(
        chuDuAnId,
        'chu_du_an_xem_bao_cao_chi_tiet',
        'BaoCao',
        null,
        null,
        { loaiBaoCao: 'ChiTiet', ...filters },
        req.ip,
        req.get('User-Agent')
      );

      res.json({
        success: true,
        message: 'L·∫•y b√°o c√°o chi ti·∫øt th√†nh c√¥ng',
        data
      });
    } catch (error) {
      console.error('L·ªói l·∫•y b√°o c√°o chi ti·∫øt:', error);
      res.status(500).json({
        success: false,
        message: error.message
      });
    }
  }
}

module.exports = ChuDuAnController;
